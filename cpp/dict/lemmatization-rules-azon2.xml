<!-- Poprzednia lista reguł, które zachowują liczbę -->
<rules>
	<!-- nam_* -->
	<rule name="SubstSubst_nam_liv_person" category="nam_liv_person">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{subst,ger,depr}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="Adj_nam_adj_country" category="nam_adj_country">
	and(
		 inter(class[0],{adj,ppas,pact}),
		 setvar($Pos1, 0),
		 setvar($s:Pos1mod, ["cas=nom","gnd=m1","nmb=sg"])
	)
	</rule>
	<rule name="Adj_nam_fac_road" category="nam_fac_road">
	and(
		 inter(class[0],{adj,ppas,pact}),
		 setvar($Pos1, 0),
		 setvar($s:Pos1mod, ["cas=nom","gnd=f"])
	)
	</rule>
	<rule name="Adj_nam_loc_gpe_admin2" category="nam_loc_gpe_admin2">
	and(
		inter(class[0],{adj}),
		setvar($Pos1, 0),
		setvar($s:Pos1mod, ["cas=nom","gnd=m3"])
	)
	</rule>
	<rule name="Subst_PlGen_nam_fac_road" category="nam_fac_road">
	and(
		 inter(class[0],{subst}),
		 inter(nmb[0],{pl}),
		 inter(cas[0],{gen}),
		 setvar($Pos1, 0)
	)
	</rule>
	<rule name="AdvHyphenAdj_nam_loc_gpe_admin1" category="nam_loc_gpe_admin1">
	and(
		inter(class[0],{adv}),
		regex(orth[1],"-"),
		inter(class[2],{adj}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos3mod, ["cas=nom","gnd=n"])
	)
	</rule>


	<!-- Adj -->
	<rule name="Adj_m1">
	and(
		 inter(class[0],{adj,ppas,pact}),
		 setvar($Pos1, 0),
		 setvar($s:Pos1mod, ["cas=nom","gnd=m1"])
	)
	</rule>
	<rule name="Adj">
	and(
		 inter(class[0],{adj,ppas,pact}),
		 setvar($Pos1, 0),  
		 setvar($s:Pos1mod, ["cas=nom"])
	)	
	</rule>
	<!-- Subst + Adj -->
	<rule name="SubstAdj_Agr12-nmb-gnd-cas">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj,pact}),
		agrpp(0,1,{nmb,gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstAdj_Agr12-nmb-cas_Sg_FixGndN">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj,pact}),
		inter(nmb[0],{sg}),
		inter(gnd[0],{n}),
		agrpp(0,1,{nmb,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom","gnd=n"])
	)
	</rule>
	<rule name="SubstAdj_Agr12-nmb-cas_Sg_FixGndM1">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj,pact}),
		inter(nmb[0],{sg}),
		inter(gnd[0],{m1}),
		agrpp(0,1,{nmb,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom","gnd=m1"])
	)
	</rule>
	<rule name="SubstAndSubstAdj_Agr134-nmb-gnd-cas">
	and(
		inter(class[0],{subst,ger,depr}),
		regex(base[1],"i"),
		inter(class[2],{subst,ger,depr}),
		inter(class[3],{adj,pact}),
		agrpp(0,2,{nmb,gnd,cas}),
		agrpp(2,3,{nmb,gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($Pos4, 3),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"]),
		setvar($s:Pos4mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstAndSubs">
	and(
		inter(class[0],{subst,ger,depr}),
		regex(base[1],"i"),
		inter(class[2],{subst,ger,depr}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<!--
	Reguła jak SubstAdjPlFix bez uzgodnienia rodzaju. Wymusza rodzaj nijaki.
	Obejście dla błędów tagera, np.:
		kwalifikacji   zawodowych 
		kwalifikacje   zawodowy   
		subst:pl:gen:n adj:pl:gen:m1:pos
	and(
		 inter(nmb[0], {pl}),
		 inter(gnd[0],{n}),
		 inter(class[0],{subst,ger,depr}),
		 inter(class[1],{adj,ppas,pact}),
		 agrpp(0,1,{nmb,cas}),
		 setvar($Pos1, 0),  
		 setvar($Pos2, 1),
		 setvar($s:Pos1mod, ["cas=nom"]),
		 setvar($s:Pos2mod, ["cas=nom","gnd=n"])
	)
	</rule>
	 -->
	<rule name="SubstAdj_Flex" source="azon">
	and(
		or(
			 and(
				inter(class[1],{adj}),
				inter(class[0],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 ),//and
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),//or
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)		
	</rule>
	<rule name="SubstAdj_SgFlex">
	and(
		or(
			 and(
				inter(class[1],{adj}),
				inter(nmb[0], {sg}),
				inter(class[0],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			),//and
			 and(
				inter(class[0],{adj}),
				inter(nmb[1],{sg}),
				inter(class[1],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),//or
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>	
	<rule name="SubstAdj_SgPl_FixNmbPl">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj}),
		inter(nmb[0],{sg}),
		inter(nmb[1],{pl}),
		agrpp(0,1,{cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom","nmb=pl"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<!--
	<rule name="SubstAdj_Flex">
	and(
		or(
			 and(
				inter(class[0],{subst,ger,depr}),
				inter(class[1],{adj,ppas,ppas}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 ),//and
			 and(
				inter(class[0],{adj,ppas,ppas}),
				inter(class[1],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),//or
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])		
	)
	</rule>
	-->
	<!--
	Obejście błędu tagera, który nie rozpoznał uzgodnienia frazy, np.:
		agencji        wykonawczych    
		agencja        wykonawczy      
		subst:sg:gen:f adj:pl:gen:f:pos
	 -->
	<!--
	<rule name="SubstAdj_SgNoNmbAgr">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(nmb[0],{sg}),
		inter(class[1],{adj}),
		agrpp(0,1,{gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])		
	) 		
	</rule>
	-->
	<!-- Adj + Subst -->
	<rule name="AdjSubstPlFix">
	and(
		inter(class[0],{adj}),
		inter(class[1],{subst,ger,depr}),
		inter(nmb[1],{pl}),
		agrpp(0,1,{nmb,gnd,cas}),  
		setvar($Pos1, 0),  
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdjSubstSgFix">
	and(
		inter(class[0],{adj}),
		inter(class[1],{subst,ger,depr}),
		inter(nmb[1],{sg}),
		agrpp(0,1,{nmb,gnd,cas}),  
		setvar($Pos1, 0),  
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdjSubstPlFlex">
	and(
		or(
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				inter(nmb[1],{pl}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 ),
			 and(
				inter(class[0],{subst,ger,depr}),
				inter(nmb[0],{pl}),
				inter(class[1],{adj}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdjSubstSgFlex">
	and(
		or(
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				inter(nmb[1],{sg}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 ),
			 and(
				inter(class[0],{subst,ger,depr}),
				inter(nmb[0],{sg}),
				inter(class[1],{adj}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)		
	</rule>
	<rule name="AdjSubstFix">
	and(
		inter(class[0],{adj}),
		inter(class[1],{subst,ger,depr}),
		agrpp(0,1,{nmb,gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdjSubstFlex">
	and(
		or(
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 ),
			 and(
				inter(class[0],{subst,ger,depr}),
				inter(class[1],{adj}),
				agrpp(0,1,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1)
			 )
		),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)		
	</rule>
	<rule name="AdjSubst_M1_Fix">
	and(
		inter(class[0],{adj}),
		inter(class[1],{subst,ger,depr}),
		inter(gnd[1],{m1}),
		agrpp(0,1,{nmb,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom","gnd=m1"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>

	<!-- Adj + Subst -->
	<rule name="SubstSubst_GenSg_Fix">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(nmb[0],{sg}),
		inter(class[1],{subst,ger,depr}),
		inter(cas[1],{gen}),  
		setvar($Pos1, 0),  
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstSubst_Gen_Fix" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{subst,ger,depr}),
		inter(cas[1],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstSubst_Agr12-nmb-gnd-cas" source="azon">
	and(
	 	inter(class[0],{subst,ger,depr}),
		inter(class[1],{subst,ger,depr}),
		agrpp(0,1,{nmb,gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)				
	</rule>
	<!-- Adj + Subst + Adj -->
	<rule name="AdjSubstAdj_Agr123-nmb-gnd-cas">
	and(
		inter(class[0],{adj,ppas}),
		inter(class[1],{subst,ger,depr}),
		inter(class[2],{adj}),
		agr(0,2,{nmb,gnd,cas}),
		setvar($Pos1, 0),  
		setvar($Pos2, 1),  
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])		 
	)
	</rule>
	<!-- mapa akustyczna Gdyni -->
	<rule name="SubstAdjSubst_Agr12-nmb-gnd-cas" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj}),
		inter(class[2],{subst,ger,depr}),
		agr(0,1,{nmb,gnd,cas}),
		setvar($Pos1, 0),  
		setvar($Pos2, 1),  
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<!-- Bibliotece Polskiej Piosenki -->
	<rule name="SubstAdjSubst_Agr23-nmb-ger-cas" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj}),
		inter(class[2],{subst,ger,depr}),
		agr(1,2,{nmb,gnd,cas}),
		setvar($Pos1, 0),  
		setvar($Pos2, 1),  
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstAdjSubst_Agr123case">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj}),
		inter(class[2],{subst,ger,depr}),
		agr(0,2,{cas}),
		setvar($Pos1, 0),  
		setvar($Pos2, 1),  
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstAdjAdjFlex">
	and(
		or(
			 and(
				inter(class[0],{subst,ger,depr}),
				inter(class[1],{adj}),
				inter(class[2],{adj}),
				agr(0,2,{nmb,gnd,cas}),  
				setvar($Pos1, 1),  
				setvar($Pos2, 0),  
				setvar($Pos3, 2)
			 ),//and
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				inter(class[2],{adj}),
				agr(0,2,{nmb,gnd,cas}),  
				setvar($Pos1, 0),  
				setvar($Pos2, 1),  
				setvar($Pos3, 2)
			 ),
			 and(
				inter(class[0],{adj}),
				inter(class[1],{subst,ger,depr}),
				inter(class[2],{adj}),
				agr(0,2,{nmb,gnd,cas}),  
				setvar($Pos1, 2),  
				setvar($Pos2, 1),  
				setvar($Pos3, 0)
			 )
		),//or
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])		 
	)		
	</rule>
	<rule name="SubstAdjSubstAdj_Gen" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj}),
		inter(class[2],{subst,ger,depr}),
		inter(class[3],{adj}),
		agr(1,3,{nmb,gnd,cas}),
		inter(cas[1],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($Pos4, 3),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>

	<rule name="SubstSubstSubst_GenGen" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{subst,ger,depr}),
		inter(class[2],{subst,ger,depr}),
		inter(cas[1],{gen}),
		inter(cas[2],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>

	<rule name="SubstSubstAdj" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{subst,ger,depr}),
		inter(class[2],{adj,ppas,pact}),
		inter(cas[1],{gen}),
		inter(cas[2],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>

	<rule name="AdjSubstSubst_Gen">
	and(
		inter(class[0],{adj,ppas,pact}),
		inter(class[1],{subst,ger,depr}),
		inter(class[2],{subst,ger,depr}),
		agr(0,1,{nmb,gnd,cas}),  
		inter(cas[2],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>

	<rule name="AdjSubstSubst_Dat">
	and(
		inter(class[0],{adj,ppas,pact}),
		inter(class[1],{subst,ger,depr}),
		inter(class[2],{subst,ger,depr}),
		agr(0,1,{nmb,gnd,cas}),
		inter(cas[2],{dat}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>

	<rule name="SubstAdvHyphenAdj_FixGndM1" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(gnd[0],{m1,m2,m3}),
		inter(class[1],{adv}),
		regex(orth[2],"-"),
		inter(class[3],{adj,ppas,pact}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($Pos4, 3),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos4mod, ["cas=nom","gnd=m1"])
	)
	</rule>		
	<rule name="AdvAdjSubst_Agr12-nmb-gnd-cas" source="azon">
	and(
		inter(class[0],{adv}),
		inter(class[1],{adj,ppas,pact}),
		inter(class[2],{subst,ger,depr}),
		agr(1,2,{nmb,gnd,cas}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos2mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdvAdjSubstSubst_Gen" source="azon">
	and(
		inter(class[0],{adv}),
		inter(class[1],{adj,ppas,pact}),
		inter(class[2],{subst,ger,depr}),
		inter(class[3],{subst,ger,depr}),
		agr(1,2,{nmb,gnd,cas}),  
		inter(cas[3],{gen}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($Pos4, 3),
		setvar($s:Pos2mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>		
	<rule name="NumAndNum" source="azon">
	and(
		inter(class[0],{num}),
		regex(base[1], "i"),
		inter(class[2],{num}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<rule name="Num2" source="azon">
	and(
		inter(class[0],{num}),
		inter(class[1],{num}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>
	<rule name="Num3" source="azon">
	and(
		inter(class[0],{num}),
		inter(class[1],{num}),
		inter(class[2],{num}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstHyphenSubst" source="azon">
	and(
		inter(class[0],{subst}),
		regex(base[1], "-"),
		inter(class[2],{subst}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<rule name="AdjaHyphenSubst" source="azon">
	and(
		inter(class[0],{adja}),
		regex(base[1], "-"),
		inter(class[2],{subst}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($s:Pos3mod, ["cas=nom"])
	)
	</rule>
	<rule name="SubstAdjaHyphenAdj" source="azon">
	and(
		inter(class[0],{subst}),
		inter(class[1],{adja}),
		regex(base[2], "-"),
		inter(class[3],{adj}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($Pos3, 2),
		setvar($Pos4, 3),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos4mod, ["cas=nom"])
	)
	</rule>
	<!--
	Poniższe reguły dopasowują początek frazy. Dla dopasowanego fragmentu
	można zastosować transformacje. Ogon (czyli pozostałe tokeny, nie uwzględnione
	w warunkach) są przepisywane. Atrybut 'setvar($PosTail, 0)' wskazuje, że są to
	reguły z "ogonem".  
	 -->
	<rule name="SubstAdjTail" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		inter(class[1],{adj,ppas,pact}),
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($PosTail, 0),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>		
	<rule name="SubstTail" source="azon">
	and(
		inter(class[0],{subst,ger,depr}),
		setvar($Pos1, 0),
		setvar($PosTail, 0),
		setvar($s:Pos1mod, ["cas=nom"])
	)
	</rule>		
	<rule name="AdjSubstTail" source="azon">
	and(
		inter(class[0],{adj,ppas,pact}),
		inter(class[1],{subst,ger,depr}),
		agr(0,1,{nmb,gnd,cas}),  
		setvar($Pos1, 0),
		setvar($Pos2, 1),
		setvar($PosTail, 0),
		setvar($s:Pos1mod, ["cas=nom"]),
		setvar($s:Pos2mod, ["cas=nom"])
	)
	</rule>		
</rules>
